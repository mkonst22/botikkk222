import logging
import os
import datetime
import re
import gspread

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dotenv import load_dotenv
from oauth2client.service_account import ServiceAccountCredentials



# ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
logging.basicConfig(level=logging.DEBUG)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")  # –í—Å—Ç–∞–≤—å ID —Å–≤–æ–µ–π Google —Ç–∞–±–ª–∏—Ü—ã


# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ int
def load_admin_ids():
    gc = gspread.service_account("credentials.json")  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
    sheet = gc.open("Client Database").sheet1  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    records = sheet.get_all_records()

    admin_ids = {
        int(row["Telegram ID"]) for row in records
        if row.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å") == "–ê–¥–º–∏–Ω" and str(row.get("Telegram ID")).isdigit()
    }
    return admin_ids  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
ADMIN_IDS = load_admin_ids()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –∏–∑–º–µ–Ω–∏—Ç—Å—è)
async def update_admin_ids():
    global ADMIN_IDS
    ADMIN_IDS = load_admin_ids()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
CARS_PER_PAGE = 5
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1  # –†–∞–±–æ—Ç–∞–µ–º —Å –ø–µ—Ä–≤—ã–º –ª–∏—Å—Ç–æ–º
cars_sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã")
changes_sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–ò–∑–º–µ–Ω–µ–Ω–∏—è")
# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
PHONE_REGEX = r"^\+7\d{10}$"

# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø ====================
class Form(StatesGroup):
    phone_number = State()
    full_name = State()
    waiting_admin_confirmation = State()
    main_menu = State()

class PhysicalStockState(StatesGroup):
    selecting_car = State()
    entering_stock = State()   

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üöó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_cars")],
        [InlineKeyboardButton(text="‚õΩÔ∏è–í–Ω–µ—Å—Ç–∏ —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–æ–∫", callback_data="enter_physical_stock")]
    ]
)
# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ, –∏ –ª–∏–±–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ª–∏–±–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç."""
    telegram_id = message.from_user.id  # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_records = sheet.get_all_records()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    user_exists = False
    user_status = None

    for record in existing_records:
        record_telegram_id = str(record.get("Telegram ID", "")).strip()
        if record_telegram_id.isdigit() and int(record_telegram_id) == telegram_id:
            user_exists = True
            user_status = record.get("–°—Ç–∞—Ç—É—Å", "–û–∂–∏–¥–∞–µ—Ç")  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            break

    if user_exists:
        if user_status == "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ":
            return
        elif user_status == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω":
            await message.answer("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
        else:
            await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await state.set_state(Form.phone_number)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à üìû–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")

@dp.message(Form.phone_number)
async def get_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone = message.text.strip()

    if not re.match(PHONE_REGEX, phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π üìû–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.")
        return

    await state.update_data(phone_number=phone)
    await state.set_state(Form.full_name)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ üë§–§–ò–û:")

@dp.message(Form.full_name)
async def save_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É."""
    full_name = message.text.strip()
    user_data = await state.get_data()

    user_data.update({
        "full_name": full_name,
        "telegram_id": message.from_user.id,  # ID –∫–ª–∏–µ–Ω—Ç–∞
        "registration_date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    await state.update_data(**user_data)  
    await state.set_state(Form.waiting_admin_confirmation)  
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ Google Sheets
    sheet.append_row([
        user_data['phone_number'],
        user_data['full_name'],
        user_data['registration_date'],
        "–û–∂–∏–¥–∞–µ—Ç",  # –°—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç"
        user_data['telegram_id']
    ])

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
    confirmation_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_user:{user_data['telegram_id']}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"block_user:{user_data['telegram_id']}")]
        ]
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"üöó –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é üöó\n\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_number']}\n"
            f"üë§ –§–ò–û: {user_data['full_name']}\n"
            f"üÜî Telegram ID: {user_data['telegram_id']}\n"
            f"‚è≥ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['registration_date']}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
            reply_markup=confirmation_keyboard
        )


@dp.callback_query(F.data.startswith("confirm_user:"))
async def confirm_user_handler(callback_query: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ Google Sheets"""
    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data
    telegram_id = callback_query.data.split(":")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if not telegram_id.isdigit():
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
        return

    telegram_id = int(telegram_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Google Sheets
    existing_records = sheet.get_all_records()

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ Telegram ID
    user_exists = False
    row = None

    for index, record in enumerate(existing_records, start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏
        record_telegram_id = str(record.get("Telegram ID", "")).strip()

        if record_telegram_id.isdigit() and int(record_telegram_id) == telegram_id:
            user_exists = True
            row = index  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            break

    if not user_exists:
        await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        await callback_query.message.edit_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" –≤ —Ç–∞–±–ª–∏—Ü–µ
    sheet.update_cell(row, 4, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")  # –°—Ç–æ–ª–±–µ—Ü 4 ‚Äî —ç—Ç–æ "–°—Ç–∞—Ç—É—Å"
    sheet.update_cell(row, 6, "–°–≤–æ–±–æ–¥–µ–Ω")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await bot.send_message(telegram_id, "‚úÖ –í–∞—à –≤—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu)

    # –ê–¥–º–∏–Ω—É ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback_query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
    await callback_query.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", reply_markup=main_menu)

@dp.callback_query(F.data.startswith("block_user:"))
async def block_user_handler(callback_query: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'."""
    telegram_id = callback_query.data.split(":")[1]  # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data

    if not telegram_id.isdigit():
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
        return

    telegram_id = int(telegram_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Google Sheets
    existing_records = sheet.get_all_records()
    user_found = False
    row = None

    for index, record in enumerate(existing_records, start=2):
        record_telegram_id = str(record.get("Telegram ID", "")).strip()
        if record_telegram_id.isdigit() and int(record_telegram_id) == telegram_id:
            user_found = True
            row = index  # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
            break

    if not user_found:
        await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        await callback_query.message.edit_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞ "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    sheet.update_cell(row, 4, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(telegram_id, "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    await callback_query.message.edit_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=main_menu)

# ================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =============
def get_cars_keyboard(page: int):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—à–∏–Ω–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∏—Å—Ç–∞–Ω–∏—è"""
    cars = cars_sheet.get_all_values()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    total_pages = (len(cars) + CARS_PER_PAGE - 1) // CARS_PER_PAGE  # –ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

    start = (page - 1) * CARS_PER_PAGE
    end = start + CARS_PER_PAGE
    cars_on_page = cars[start:end]

    buttons = [
        [InlineKeyboardButton(text=f"üöô {car[0]}", callback_data=f"car_info:{car[0]}")]
        for car in cars_on_page
    ]

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"view_cars_page:{page - 1}"))
    if page < total_pages:
        navigation_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"view_cars_page:{page + 1}"))

    if navigation_buttons:
        buttons.append(navigation_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    buttons.append([InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.callback_query(F.data == "view_cars")
async def view_cars(callback_query: CallbackQuery):
    """–í—ã–≤–æ–¥ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—à–∏–Ω"""
    await callback_query.message.edit_text("üìã –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω:", reply_markup=get_cars_keyboard(1))

@dp.callback_query(F.data.startswith("view_cars_page:"))
async def change_page(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω"""
    page = int(callback_query.data.split(":")[1])
    await callback_query.message.edit_text("üìã –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω:", reply_markup=get_cars_keyboard(page))

@dp.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback_query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

# ===========# ==================== –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ ====================
@dp.callback_query(F.data.startswith("car_info:"))
async def car_info(callback_query: CallbackQuery):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ (–Ω–æ–º–µ—Ä, –æ—Å—Ç–∞—Ç–æ–∫, –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"""
    car_number = callback_query.data.split(":")[1]
    cars = cars_sheet.get_all_values()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫
    users = sheet.get_all_values()[1:]
    user_id = str(callback_query.from_user.id)

    car_row = None
    for index, car in enumerate(cars, start=2):
        if car[0] == car_number:
            car_row = index
            break
    for index, user in enumerate(users,start=2):
        if len(user) > 4 and user[4] == user_id:
            sheet.update_cell(index, 6, "–í —Ä–µ–π—Å–µ")
            break

    for car in cars:
        if car[0] == car_number:  # –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –Ω–∞–π–¥–µ–Ω
            stock = car[1] if len(car) > 1 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            last_update = car[2] if len(car) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—à–∏–Ω", callback_data="view_cars")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )
            
            await callback_query.message.edit_text(
                f"üöô –ú–∞—à–∏–Ω–∞: {car_number}\n‚õΩÔ∏è –û—Å—Ç–∞—Ç–æ–∫: {stock} –ª\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {last_update}",
                reply_markup=keyboard
            )
            return

    await callback_query.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# ==================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ====================
@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback_query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

# ==================== –í—ã–±–æ—Ä –º–∞—à–∏–Ω ====================
@dp.callback_query(F.data == "view_cars")
async def view_cars(callback_query: CallbackQuery):
    """–í—ã–≤–æ–¥ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—à–∏–Ω"""
    await callback_query.message.edit_text("üìã –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω:", reply_markup=get_cars_keyboard(1))

# ==================== –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–∫–∞ ====================
@dp.callback_query(F.data == "enter_physical_stock")
async def select_car_for_physical_stock(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –ø–µ—Ä–µ–¥ –≤–Ω–µ—Å–µ–Ω–∏–µ–º —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–∫–∞."""
    cars = cars_sheet.col_values(1)[1:]  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)

    if not cars:
        await callback_query.message.answer("üöó –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –ø—É—Å—Ç.")
        return

    page = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await callback_query.message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–∫–∞:", reply_markup=get_cars_keyboard_for_stock(page))

# ==================== –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–∫–∞ ====================
def get_cars_keyboard_for_stock(page: int):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—à–∏–Ω–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∏—Å—Ç–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–∫–∞"""
    cars = cars_sheet.get_all_values()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    total_pages = (len(cars) + CARS_PER_PAGE - 1) // CARS_PER_PAGE  # –ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

    start = (page - 1) * CARS_PER_PAGE
    end = start + CARS_PER_PAGE
    cars_on_page = cars[start:end]

    buttons = [
        [InlineKeyboardButton(text=f"üöô {car[0]}", callback_data=f"select_physical_car:{car[0]}")]
        for car in cars_on_page
    ]

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"enter_physical_stock_page:{page - 1}"))
    if page < total_pages:
        navigation_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"enter_physical_stock_page:{page + 1}"))

    if navigation_buttons:
        buttons.append(navigation_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    buttons.append([InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.callback_query(F.data.startswith("enter_physical_stock_page:"))
async def change_page_for_physical_stock(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω –¥–ª—è —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–∫–∞"""
    page = int(callback_query.data.split(":")[1])
    await callback_query.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–∫–∞:",
        reply_markup=get_cars_keyboard_for_stock(page)
    )


@dp.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback_query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

# ==================== –í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã –¥–ª—è —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–∫–∞ ====================
@dp.callback_query(F.data.startswith("select_physical_car:"))
async def select_physical_car(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã"""
    car_number = callback_query.data.split(":")[1]
    await state.update_data(selected_car=car_number)

    await callback_query.message.answer(f"üöô –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—à–∏–Ω—É {car_number}.\n–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞ –≤ –±–∞–∫–µ (–ª):")
    await state.set_state(PhysicalStockState.entering_stock)

# ==================== –í–≤–æ–¥ —Ñ–∏–∑. –æ—Å—Ç–∞—Ç–∫–∞ ====================
from datetime import datetime
print(datetime.now())
@dp.message(PhysicalStockState.entering_stock)
async def save_physical_stock(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ Google Sheets."""
    physical_stock = message.text.strip()

    if not physical_stock.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ª–∏—Ç—Ä–æ–≤.")
        return

    user_data = await state.get_data()
    selected_car = user_data["selected_car"]
    telegram_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
    clients_sheet = client.open_by_key(SPREADSHEET_ID).sheet1
    records = clients_sheet.get_all_records()

    client_info = None
    row_number = None

    for i, record in enumerate(records, start=2):
        if str(record.get("Telegram ID", "")).strip() == str(telegram_id):
            client_info = record
            row_number = i
            break

    if not client_info:
        await message.answer("‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await state.clear()
        return
    keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )

    full_name = client_info.get("–§–ò–û", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    phone_number = client_info.get("–¢–µ–ª–µ—Ñ–æ–Ω", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    from datetime import datetime
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç ¬´–ò–∑–º–µ–Ω–µ–Ω–∏—è¬ª
    changes_sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–ò–∑–º–µ–Ω–µ–Ω–∏—è")
    changes_sheet.append_row([
        full_name, phone_number, selected_car, physical_stock, current_time
    ])

    clients_sheet.update_cell(row_number,6 , "–°–≤–æ–±–æ–¥–µ–Ω")

    await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã:\nüë§ –§–ò–û: {full_name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\nüöô –ú–∞—à–∏–Ω–∞: {selected_car}\n‚õΩÔ∏è –û—Å—Ç–∞—Ç–æ–∫: {physical_stock} –ª", reply_markup=keyboard)

    await state.clear()



# ============= –ê–î–ú–ò–ù =================
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup

# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø ====================
class AdminState(StatesGroup):
    selecting_car = State()
    entering_stock = State()

# ==================== –ò–ù–õ–ê–ô–ù-–ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –ê–î–ú–ò–ù–ê ====================
admin_inline_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="get_info")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫", callback_data="admin_update_stock")],
        [InlineKeyboardButton(text="üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="admin_notify")]
    ]
)
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
admin_inline_go_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_inline_menu")]
    ]
)
# ==================== –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ê ====================
@dp.message(Command("admin"))
async def show_admin_panel(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_inline_menu)

# ==================== –í–ù–ï–°–ï–ù–ò–ï –û–°–¢–ê–¢–ö–ê ====================
@dp.callback_query(F.data == "admin_update_stock")
async def select_car_for_stock_update(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –æ—Å—Ç–∞—Ç–∫–∞."""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
   
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã")
    cars = sheet.col_values(1)[1:]  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)

    if not cars:
        await callback.message.answer("üöó –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –ø—É—Å—Ç.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=car, callback_data=f"select_car:{car}")] for car in cars
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    return_button = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_inline_menu")
    keyboard.inline_keyboard.append([return_button])
    
    await state.set_state(AdminState.selecting_car)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(message_id=callback.message.message_id)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã
    await callback.message.bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞:",
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=keyboard
    )

@dp.callback_query(F.data.startswith("select_car:"))
async def enter_stock_value(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞."""
    car_number = callback.data.split(":")[1]
    await state.update_data(selected_car=car_number)

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    data = await state.get_data()
    message_id = data.get('message_id')

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ –æ—Å—Ç–∞—Ç–∫–∞
    await callback.message.bot.edit_message_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –º–∞—à–∏–Ω—ã {car_number}:",
        chat_id=callback.message.chat.id,
        message_id=message_id
    )

    await state.set_state(AdminState.entering_stock)

@dp.message(AdminState.entering_stock)
async def update_stock(message: Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    new_stock = message.text.strip()

    if not new_stock.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞.")
        return

    data = await state.get_data()
    car_number = data["selected_car"]

    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã")
    records = sheet.get_all_records(expected_headers=["–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã", "–û—Å—Ç–∞—Ç–æ–∫", "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"])

    row_to_update = None

    # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
    for index, record in enumerate(records, start=2):
        if record["–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã"] == car_number:
            row_to_update = index
            break

    if row_to_update:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∏ –¥–∞—Ç—ã
        sheet.update(f"B{row_to_update}", [[new_stock]])  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        sheet.update(f"C{row_to_update}", [[datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")]])  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await message.answer(f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –º–∞—à–∏–Ω—ã {car_number} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_stock} –ª", reply_markup=admin_inline_go_menu)
    else:
        await message.answer("‚ùå –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await state.clear()



# =============== –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã ======================
from datetime import datetime
from aiogram import types

@dp.callback_query(F.data == "get_info")
async def get_info(callback_query: types.CallbackQuery):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
    today = datetime.datetime.now().strftime("%Y-%m-%d")  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ì–ì–ì–ì-–î–î-–ú–ú
    changes = changes_sheet.get_all_values()[1:]  # –î–∞–Ω–Ω—ã–µ –∏–∑ "–ò–∑–º–µ–Ω–µ–Ω–∏—è" (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    cars = cars_sheet.get_all_values()[1:]  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—à–∏–Ω

    car_data = {car[0]: "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç" for car in cars}  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –º–∞—à–∏–Ω–∞–º–∏

    last_entries = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω–µ

    for row in changes:
        if len(row) < 5:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö

        fio = row[0]  # –§–ò–û –∏–∑ 1-–π —è—á–µ–π–∫–∏
        car_number = row[2]  # –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –∏–∑ 3-–π —è—á–µ–π–∫–∏
        stock = row[3]  # –§–∏–∑. –æ—Å—Ç–∞—Ç–æ–∫ –∏–∑ 4-–π —è—á–µ–π–∫–∏
        date = row[4].split()[0] if row[4] else ""  # –î–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ (5-—è —è—á–µ–π–∫–∞)

        if date == today:  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é
            last_entries[car_number] = f"{fio}, {stock} –ª"  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—à–∏–Ω–∞–º
    for car_number, info in last_entries.items():
        car_data[car_number] = info

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    info_text = "\n".join([f"{car}: {info}" for car, info in car_data.items()])

    await callback_query.message.edit_text(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞—à–∏–Ω–∞–º –∑–∞ {today}:\n{info_text}", reply_markup=admin_inline_go_menu)

@dp.callback_query(F.data == "admin_inline_menu")
async def go_back_to_admin_menu(callback_query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    await callback_query.message.edit_text("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_inline_menu)

# ========== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ==============
class AdminState(StatesGroup):
    selecting_user = State()
    sending_message = State()
    waiting_for_message = State()
    selecting_car = State() 
    entering_stock = State()

import logging

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã
def get_users_from_first_sheet():
    try:
        sheet = client.open("Client Database").sheet1  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        users = sheet.get_all_records()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
        logging.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
        return users
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
@dp.callback_query(F.data == "admin_notify")
async def notify_users(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
       await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
       return
    users = get_users_from_first_sheet()
    if not users:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        if "–§–ò–û" in user and "Telegram ID" in user:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Telegram ID –≤ —Å—Ç—Ä–æ–∫—É
            tg_id_str = str(user["Telegram ID"])
            keyboard.inline_keyboard.append([InlineKeyboardButton(text=user["–§–ò–û"], callback_data=f"select_user:{tg_id_str}")])

    if not keyboard.inline_keyboard:
        await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data.startswith("select_user:"))
async def select_user_for_message(callback: types.CallbackQuery, state: FSMContext):
    tg_id = callback.data.split(":")[1]  # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    users = get_users_from_first_sheet()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Telegram ID –≤ —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
    user = next((u for u in users if str(u.get("Telegram ID")) == tg_id), None)

    if user:
        await state.update_data(user_tg_id=tg_id, user_name=user["–§–ò–û"])
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['–§–ò–û']}:")
        await state.set_state(AdminState.waiting_for_message)
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@dp.message(AdminState.waiting_for_message)
async def send_message_to_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_tg_id = data.get("user_tg_id")
    user_name = data.get("user_name")

    if user_tg_id:
        try:
            main_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main_menu")]
            ])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(user_tg_id, message.text, reply_markup=main_menu_keyboard)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}.", reply_markup=admin_inline_go_menu)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query(lambda c: c.data == "go_main_menu")
async def go_main_menu(callback: types.CallbackQuery):
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)


# ================== –¢–∞–π–º–µ—Ä ===============
import pytz
import datetime
# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
MSK_TZ = pytz.timezone("Europe/Moscow")

async def send_fuel_reminder(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–í —Ä–µ–π—Å–µ'."""
    now = datetime.datetime.now(MSK_TZ)
    start_time = now.replace(hour=23, minute=5, second=15, microsecond=0)
    end_time = now.replace(hour=23, minute=59, second=0, microsecond=0)

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ 23:59, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è 19:00
    if now >= end_time:
        next_start = now + datetime.timedelta(days=1)
        start_time = next_start.replace(hour=19, minute=0, second=0, microsecond=0)

    # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ 19:00 –ú–°–ö
    await asyncio.sleep((start_time - now).total_seconds())

    while datetime.datetime.now(MSK_TZ) < end_time:
        users = sheet.get_all_values()[1:]  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)

        for user in users:
            if len(user) >= 6 and user[5] == "–í —Ä–µ–π—Å–µ":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±–µ—Ü F (6-–π)
                telegram_id = user[4]  # –°—Ç–æ–ª–±–µ—Ü E ‚Äî Telegram ID
                
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                )

                try:
                    await bot.send_message(
                        telegram_id, 
                        "üö® –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–π—Å–∞!", 
                        reply_markup=keyboard
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {telegram_id}: {e}")

        # –ñ–¥–µ–º 15 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(1 * 30)

async def schedule_fuel_reminder(bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00 –ú–°–ö."""
    while True:
        await send_fuel_reminder(bot)

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def main():
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        asyncio.create_task(schedule_fuel_reminder(bot))  # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
